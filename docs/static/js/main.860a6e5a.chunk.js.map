{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFechtGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","getInputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGIfs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGidItem","className","src","alt","GifGid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"uLAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEPC,mBAAS,IAFF,mBAEvCC,EAFuC,KAExBC,EAFwB,KAkB9C,OACI,0BAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEGJ,EAAcK,OAAOC,OAAS,IAC/BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAuBO,OAC1CN,EAAc,OAOd,2BACIO,KAAK,OACLC,MAAQT,EACRU,SAnBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,Y,uBCRlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCEPO,EAAa,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEnC,OACI,yBAAKc,UAAU,4CACX,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,KCAHO,EAAS,SAAC,GAAoB,IAAjBnB,EAAgB,EAAhBA,SAAgB,ECJd,SAAEA,GAAe,IAAD,EACdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KAgBxC,OAVAC,qBAAW,WACPxB,EAAQC,GACHwB,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGtB,CAACpB,IAEGqB,EDRiBK,CAAc1B,GAA/BO,EAJ+B,EAI/BA,KAAMa,EAJyB,EAIzBA,QAQb,OACI,oCACI,4BAAMpB,GAEJoB,GAAW,yCACb,yBAAKJ,UAAU,aAEHT,EAAKE,KAAK,SAAAC,GAAG,OACT,kBAAC,EAAD,eACIiB,IAAKjB,EAAIC,IACLD,UEzBvBkB,EAAe,WAAO,IAAD,EAEM1C,mBAAS,CAAC,cAFhB,mBAEvB2C,EAFuB,KAEX5C,EAFW,KAI9B,OACI,oCACI,kDACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BACA,4BAEQ4C,EAAWpB,KAAK,SAAAT,GAAQ,OACpB,kBAAC,EAAD,CACI2B,IAAM3B,EACNA,SAAWA,U,MCbvC8B,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.860a6e5a.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from  'prop-types';\r\n\r\nexport const AddCategory = ( {setCategories} ) => {\r\n\r\n    const [getInputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        \r\n        if ( getInputValue.trim().length > 2 ) {\r\n            setCategories( cats => [getInputValue, ...cats] );\r\n            setInputValue('');\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n                type=\"text\" \r\n                value={ getInputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n            \r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","export const getGIfs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=aZyp1CHlf28YVTJjvVcvomaZTCFvHbbN`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n}\r\n//getGIfs();","import React from 'react'\r\n\r\nexport const GifGidItem = ({id, title, url}) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInUp\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFechtGifs'\r\nimport { GifGidItem } from './GifGridItem';\r\n// import { getGIfs } from '../helpers/getGifs';\r\n\r\n// useEffect: ejecuta codigo de manera condicional\r\n\r\nexport const GifGid = ( { category } ) => {\r\n\r\n    // const [getImages, setImages] = useState([]);\r\n\r\n    const {data, loading} = useFetchGifs( category );\r\n   \r\n    // useEffect(() => {\r\n    //     getGIfs( category )\r\n    //         .then(setImages);\r\n    // }, [category] );\r\n\r\n    \r\n    return (\r\n        <>\r\n            <h2>{ category }</h2>\r\n            {/* {loading ? 'Cargando...' : 'Data cargada'} */}\r\n            { loading && <p>Loading...</p>}\r\n            <div className=\"card-grid\">\r\n                    {\r\n                        data.map( img => (\r\n                            <GifGidItem \r\n                                key={img.id}\r\n                                {...img} />\r\n                        ))\r\n                    }\r\n            </div>\r\n        </>\r\n    )\r\n}","import { useState, useEffect } from \"react\"\r\nimport { getGIfs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n        getGIfs(category)\r\n            .then( imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n            })\r\n    }, [category])\r\n\r\n    return state;\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n \r\n    return (\r\n        <>\r\n            <h2>Busca alg√∫n gif</h2>\r\n            <AddCategory setCategories={ setCategories } />\r\n            <hr />\r\n            <ol>\r\n                {\r\n                    categories.map( category => (\r\n                        <GifGid \r\n                            key={ category }\r\n                            category={ category } \r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n// api.giphy.com/v1/gifs/search","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}